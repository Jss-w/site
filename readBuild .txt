环境：node
命令：
    1.npm init（创建package.json文件包,npm安装package.json时直接转到当前项目目录下用命令npm install (安装)或npm install --save-dev (安装并记录到package.json里面)安装即可，自动将package.json中的模块安装到node-modules文件夹下）
    2.npm install（创建node项目）

全局安装gulp(全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能)
    1.说明：全局安装gulp目的是为了通过她执行gulp任务；
    2.安装：命令提示符执行cnpm install gulp -g；
    3.查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。
    4.为了能正常使用，我们还得本地安装gulp：npm install gulp --save-dev
    5.下面就可以安装gulp的相关插件了---示例以gulp-less为例（编译less文件），命令提示符执行cnpm install gulp-less --save-dev

运行gulp
    1.运行gulp命令：gulp
    2.说明：命令提示符执行gulp 任务名称；
    3.编译less：命令提示符执行gulp testLess；
    4.当执行gulp default或gulp将会调用default任务里的所有任务[‘testLess’,’elseTask’]。
    5.使用webstorm运行gulp任务

创建gulp配置文件gulpfile.js
    1.在项目根目录新建一个js文件并命名为 gulpfile.js，把下面的代码粘贴进去
---------------------------------------------粘贴代码---------------------------------------------
//导入工具包 require('node_modules里对应模块')
var gulp = require('gulp'), //本地安装gulp所用到的地方
    less = require('gulp-less');
 
//定义一个testLess任务（自定义任务名称）
gulp.task('testLess', function () {
    gulp.src('src/less/index.less') //该任务针对的文件
        .pipe(less()) //该任务调用的模块
        .pipe(gulp.dest('src/css')); //将会在src/css下生成index.css
});
 
gulp.task('default',['testLess', 'elseTask']); //定义默认任务 elseTask为其他任务，该示例没有定义elseTask任务
 
//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数
//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) 
//gulp.dest(path[, options]) 处理完后文件生成路径
--------------------------------------------------------------------------------------------------

安装插件gulp-sass：npm install --save-dev gulp-sass （如果有package.json的配置就不需要了）
安装插件gulp-minify-css：npm install --save-dev gulp-minify-css （如果有package.json的配置就不需要了）
安装插件gulp-watch：npm install --save-dev gulp-watch （如果有package.json的配置就不需要了）
安装插件browser-sync：npm install --save-dev browser-sync （如果有package.json的配置就不需要了）
    







